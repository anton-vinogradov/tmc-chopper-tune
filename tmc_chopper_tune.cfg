[respond]
[force_move]
enable_force_move: True

[gcode_shell_command tmc_chop_tune]
command: ~/tmc-chopper-tune/chopper_plot.sh
timeout: 9999.0
verbose: True

[gcode_macro TMC_CHOPPER_ADXL_CHECK]
description: Check vibration
gcode:
    _detect_accel_chip
    {% set accel_chip = printer['gcode_macro _detect_accel_chip'].accel_chip|string|lower %}

    MEASURE_AXES_NOISE
    M400

    RUN_SHELL_COMMAND CMD=tmc_chop_tune PARAMS='clean' ; Clean csv files
    ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still
    G4 P5000
    ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still

    RUN_SHELL_COMMAND CMD=tmc_chop_tune PARAMS='adxl_check' ; Process csv files

[gcode_macro TMC_CHOPPER_CHECK]
description: Check vibration
gcode:
    {% set stepper = params.STEPPER|default('X')|string|lower %}

    _detect_driver stepper={stepper}
    _chop_workflow check=true stepper={stepper} {rawparams}

[gcode_macro TMC_CHOPPER_TUNE]
description: Run vibration tests of chopper to calculate lowest magnitude driver registers
gcode:
    {% set stepper = params.STEPPER|default('X')|string|lower %}

    _detect_driver stepper={stepper}
    _chop_workflow check=false stepper={stepper} {rawparams}

[gcode_macro _detect_driver]
description: Find which driver is used in configuration
variable_drivers: '2130', '2208', '2209', '2660', '2240', '5160'                        ; Drivers supported by Klipper
variable_driver: 0
gcode:
    {% set stepper = 'stepper_' + params.STEPPER|string|lower %}                        ; Import default stepper for search its driver
    {% for driver in drivers %}
        {% if 'run_current' in printer.configfile.settings['tmc' + driver + ' ' + stepper] %}
            {action_respond_info('Selected tmc%s for %s' % (driver, stepper))}
            SET_GCODE_VARIABLE MACRO=_detect_driver VARIABLE=driver VALUE={driver}
        {% endif %}
    {% endfor %}

[gcode_macro _detect_accel_chip]
variable_accel_chip: 0
gcode:
    {% if 'accel_chip' in printer.configfile.settings.resonance_tester %}
        {% set accel_chip = printer.configfile.settings.resonance_tester.accel_chip %}
    {% else %}
        {% set accel_chip = 'adxl345' %}                                            ; Default accelerometer
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_detect_accel_chip VARIABLE=accel_chip VALUE={accel_chip}
    {action_respond_info('Selected %s for accelerometer' % (accel_chip))}

[gcode_macro _chop_apply_regs]
variable_registers: 'tbl', 'toff', 'hend', 'hstrt'
gcode:
    M118 Setting {params.FIELD|string|lower} to {params.VALUE|int}
    SET_TMC_FIELD STEPPER={params.STEPPER|string|lower} FIELD={params.FIELD} VALUE={params.VALUE|int}

[gcode_macro _chop_workflow]
description: Calculate process of TMC_CHOPPER_TUNE macro
variable_measure_time: 1250                                                             ; Set measure time (msec)
gcode:
    {% set check = params.CHECK|string %}

    {% set stepper = 'stepper_' + params.STEPPER|string|lower %}
    {% set driver = printer['gcode_macro _detect_driver'].driver|string|lower %}

    {% set tbl_min = params.TBL_MIN|default(0)|int %}
    {% set tbl_max = params.TBL_MAX|default(3)|int %}
    {% set toff_min = params.TOFF_MIN|default(0)|int %}
    {% set toff_max = params.TOFF_MAX|default(15)|int %}
    {% set hstrt_min = params.HSTRT_MIN|default(0)|int %}
    {% set hstrt_max = params.HSTRT_MAX|default(7)|int %}
    {% set hend_min = params.HEND_MIN|default(0)|int %}
    {% set hend_max = params.HEND_MAX|default(15)|int %}

    {% set min_speed = params.MIN_SPEED|default('default')|string|lower %}
    {% set max_speed = params.MAX_SPEED|default('default')|string|lower %}
    {% set acceleration = printer.configfile.settings.printer.max_accel / 10|int %} ; Lower acceleration cause less deviation
    {% set measure_time = printer['gcode_macro _chop_workflow'].measure_time / 1000|float %}

    {% if 'accel_chip' in printer.configfile.settings.resonance_tester %}
        {% set accel_chip = printer.configfile.settings.resonance_tester.accel_chip %}
    {% else %}
        {% set accel_chip = 'adxl345' %}                                            ; Default accelerometer
    {% endif %}
    {action_respond_info('Selected %s for accelerometer' % (accel_chip))}

    {% if check == 'true' %}
        {% set tbl_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_tbl %}
        {% set tbl_max = tbl_min %}
        {% set toff_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_toff %}
        {% set toff_max = toff_min %}
        {% set hstrt_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_hstrt %}
        {% set hstrt_max = hstrt_min %}
        {% set hend_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_hend %}
        {% set hend_max = hend_min %}
        {% if min_speed == 'default' %}
            {% set min_speed = 25|int %}
        {% else %}
            {% set min_speed = min_speed|int %}
        {% endif %}
        {% if max_speed == 'default' %}
            {% set max_speed = 28|int %}
        {% else %}
            {% set max_speed = max_speed|int %}
        {% endif %}
    {% else %}
        {% if min_speed == 'default' or max_speed == 'default' %}                       ; Protect not defined speed & converting str -> int
            {action_raise_error('WARNING!!! Resonance speed must be defined')}
        {% endif %}
        {% set min_speed, max_speed = min_speed|int, max_speed|int %}
    {% endif %}

    DUMP_TMC STEPPER={stepper} REGISTER=chopconf ; Dump initial TMC settings

    SET_VELOCITY_LIMIT ACCEL={acceleration}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={acceleration}

    RUN_SHELL_COMMAND CMD=tmc_chop_tune PARAMS='clean' ; Clean csv files

    G28 ; Home axis
    M18 ; Disable motors

    # ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still
    # G4 P5000
    # ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still

    {% for tbl in range(tbl_min, tbl_max + 1) %}
        _chop_apply_regs stepper={stepper} field=tbl value={tbl}
        {% for toff in range(toff_min, toff_max + 1) %}
             _chop_apply_regs stepper={stepper} field=toff value={toff}
            {% for hstrt in range(hstrt_min, hstrt_max + 1) %}
                {% for hend in range(hend_min, hend_max + 1) %}
                    {% if hend + hstrt <= 16 %}
                        M118 [tbl={tbl} of {tbl_max}, toff={toff} of {toff_max}, hstrt={hstrt} of {hstrt_max}, hend={hend} of {hend_max}]

                        _chop_apply_regs stepper={stepper} field=hend value={hend}
                        _chop_apply_regs stepper={stepper} field=hstrt value={hstrt}

                        DUMP_TMC STEPPER={stepper} REGISTER=chopconf ; Dump TMC settings

                        {% for speed in range(min_speed, max_speed|int + 1) %}
                            {% set name = "%s_%s_%s_%s_%s" % (tbl, toff, hstrt, hend, speed) %}
                            {% set accel_decel_distance = speed ** 2 / acceleration %} ; T=V/A, S=A*T^2 => S=V^2/A
                            {% for direction in [-1, 1] %}
                                {% set travel_distance = (accel_decel_distance + (speed * measure_time)) * direction %}

                                M118 Speed {speed} mm/s on {travel_distance|round(2)|float} mm

                                M400 ; This command causes G-code processing to pause and wait in a loop until all moves in the planner are completed.
                                ACCELEROMETER_MEASURE CHIP={accel_chip} NAME={name}_{direction}; Start accelerometer data collection
                                FORCE_MOVE STEPPER={stepper} DISTANCE={travel_distance} VELOCITY={speed} ACCEL={acceleration} ; Movement
                                M400
                                ACCELEROMETER_MEASURE CHIP={accel_chip} NAME={name}_{direction}; Stop accelerometer data collection
                            {% endfor %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}
            {% endfor %}
        {% endfor %}
    {% endfor %}
    RUN_SHELL_COMMAND CMD=tmc_chop_tune PARAMS='process' ; Process csv files

    # RUN_SHELL_COMMAND CMD=tmc_chop_tune PARAMS='{'tbl_min=%d tbl_max=%d toff_min=%d toff_max=%d hstrt_min=%d hstrt_max=%d'
    # ' hend_min=%d hend_max=%d min_speed=%d max_speed=%d accel_chip=%s driver=%s'%(
    #    tbl_min, tbl_max, toff_min, toff_max, hstrt_min, hstrt_max, hend_min, hend_max, min_speed, max_speed, accel_chip, driver)}' ; export data to processing

    M18 ; Disable motors