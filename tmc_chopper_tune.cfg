[respond]

[gcode_shell_command tmc_chop_tune]
command: ~/tmc-chopper-tune/chopper_plot.sh
timeout: 9999.0
verbose: True

[gcode_macro TMC_CHOPPER_CHECK]
description: Check vibration
gcode:
    {% set axis = params.AXIS|default('X')|string|lower %}

    _detect_driver stepper={axis}
    _chop_workflow check=true axis={axis} {rawparams}

[gcode_macro TMC_CHOPPER_TUNE]
description: Run vibration tests of chopper to calculate lowest magnitude driver registers
gcode:
    {% set axis = params.AXIS|default('X')|string|lower %}

    _detect_driver stepper={axis}
    _chop_workflow check=false axis={axis} {rawparams}

[gcode_macro _detect_driver]
description: Find which driver is used in configuration
variable_drivers: '2130', '2208', '2209', '2660', '2240', '5160'                        ; Drivers supported by Klipper
variable_driver: 0
gcode:
    {% set stepper = 'stepper_' + params.STEPPER|string|lower %}                        ; Import default stepper for search its driver
    {% for driver in drivers %}
        {% if 'run_current' in printer.configfile.settings['tmc' + driver + ' ' + stepper] %}
            {action_respond_info('Selected tmc%s for %s' % (driver, stepper))}
            SET_GCODE_VARIABLE MACRO=_detect_driver VARIABLE=driver VALUE={driver}
        {% endif %}
    {% endfor %}

[gcode_macro _chop_apply_regs]
variable_registers: 'tbl', 'toff', 'hend', 'hstrt'
variable_tbl:   -1
variable_toff:  -1
variable_hend:  -1
variable_hstrt: -1
gcode:
    SET_TMC_FIELD STEPPER={params.A_STEPPER|string|lower} FIELD={params.FIELD} VALUE={params.VALUE|int}

[gcode_macro _chop_workflow]
description: Calculate process of TMC_CHOPPER_TUNE macro
variable_inset: 10                                                                      ; Offset from axis limits (mm), to determine work area limits
variable_measure_time: 1250                                                             ; Set measure time (msec)
variable_delay: 500                                                                     ; Set delay between measurements (msec)
gcode:
    {% set check = params.CHECK|string %}
    {% set axis = params.AXIS|string %}
    {% set stepper = 'stepper_' + params.AXIS|string %}                           ; Import default stepper from TMC_CHOPPER_TUNE for search printer.cfg registers
    {% set driver = printer['gcode_macro _detect_driver'].driver|string|lower %}        ; Import default driver from _detect_driver for search printer.cfg registers
    {% set tbl_min = params.TBL_MIN|default(0)|int %}
    {% set tbl_max = params.TBL_MAX|default(3)|int %}
    {% set toff_min = params.TOFF_MIN|default(1)|int %}
    {% set toff_max = params.TOFF_MAX|default(8)|int %}
    {% set hstrt_hend_max = params.HSTRT_HEND_MAX|default(16)|int %}
    {% set hstrt_min = params.HSTRT_MIN|default(0)|int %}
    {% set hstrt_max = params.HSTRT_MAX|default(7)|int %}
    {% set hend_min = params.HEND_MIN|default(2)|int %}
    {% set hend_max = params.HEND_MAX|default(15)|int %}
    {% set min_speed = params.MIN_SPEED|default('default')|string|lower %}
    {% set max_speed = params.MAX_SPEED|default('default')|string|lower %}
    {% set accel_chip = params.ACCELEROMETER|default('default')|string|lower %}
    {% set trv_speed = printer.configfile.settings.printer.max_velocity / 2 * 60|int %} ; Idle movements speed
    {% set inset = printer['gcode_macro _chop_workflow'].inset %}
    {% set acceleration = printer.configfile.settings.printer.max_accel|int %}
    {% set measure_time = printer['gcode_macro _chop_workflow'].measure_time / 1000|float %}
    {% set delay = printer['gcode_macro _chop_workflow'].delay|int %}
    {% set kinematics = printer.configfile.settings.printer.kinematics|string %}

    {% if kinematics == 'corexy' %}                                                     ; Select main and secondary axis / stepper
        {% if axis == 'x' %}
            {% set b_axis = 'y' %}
        {% elif axis == 'y' %}
            {% set b_axis = 'x' %}
        {% else %}
            {action_raise_error('WARNING!!! Incorrect direction')}
        {% endif %}
        {% set a_stepper = 'stepper_x' %}                                               ; Select steppers to which applying registers
        {% set b_stepper = 'stepper_y' %}
    {% else %}
        {action_raise_error('WARNING!!! Script does not support your kinematics')}
    {% endif %}

    {% set minAX = printer.configfile.settings[stepper].position_min|float + inset %}   ; Axis positions
    {% set maxAX = printer.configfile.settings[stepper].position_max|float - inset %}
    {% set midBAX = ((printer.configfile.settings['stepper_' + b_axis].position_max|float - inset) -
     (printer.configfile.settings['stepper_' + b_axis].position_min|float + inset)) / 2 %}

    {% for register in printer['gcode_macro _chop_apply_regs'].registers %}             ; Reseting variables with registers
        SET_GCODE_VARIABLE MACRO=_chop_apply_regs VARIABLE={register|string|lower} VALUE=-1
    {% endfor %}

    {% if accel_chip == 'default' %}                                                    ; Auto-select accelerometer
        {% if 'accel_chip' in printer.configfile.settings.resonance_tester %}
            {% set accel_chip = printer.configfile.settings.resonance_tester.accel_chip %}
        {% else %}
            {% set accel_chip = 'adxl345' %}                                            ; Default accelerometer
        {% endif %}
    {% endif %}
    {action_respond_info('Selected %s for accelerometer' % (accel_chip))}

    {% if check == 'true' %}                                    ; In vibration measurement mode, search and takes registers from printer.cfg
        {% set tbl_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_tbl %}
        {% set tbl_max = tbl_min %}
        {% set toff_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_toff %}
        {% set toff_max = toff_min %}
        {% set hstrt_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_hstrt %}
        {% set hstrt_max = hstrt_min %}
        {% set hend_min = printer.configfile.settings['tmc' + driver + ' ' + stepper].driver_hend %}
        {% set hend_max = hend_min %}
        {% if min_speed == 'default' %}
            {% set min_speed = 25|int %}
        {% else %}
            {% set min_speed = min_speed|int %}
        {% endif %}
        {% if max_speed == 'default' %}
            {% set max_speed = 100|int %}
        {% else %}
            {% set max_speed = max_speed|int %}
        {% endif %}
    {% else %}
        {% if min_speed == 'default' or max_speed == 'default' %}                       ; Protect not defined speed & converting str -> int
            {action_raise_error('WARNING!!! Resonance speed must be defined')}
        {% endif %}
        {% set min_speed, max_speed = min_speed|int, max_speed|int %}
    {% endif %}

    {% set accel_decel_distance = max_speed ** 2 / acceleration %}
    {% set auto_travel_distance = accel_decel_distance + (max_speed * measure_time) %}

    {action_respond_info('Acceleration & deceleration zone = %f mm' % (accel_decel_distance))}
    {action_respond_info('Auto calculated min required travel distance = %f mm' % (auto_travel_distance))}

    {% set travel_distance = auto_travel_distance %}

    {% if check == 'true' %}                                    ; Info message
        {action_respond_info('Final max travel distance = %.2f mm, position min = %.2f, traveling: %.2f --> %.2f' %
         (travel_distance, minAX, minAX, travel_distance + minAX))}
        {action_respond_info('Start find vibration mode, speed: %d --> %d mm/s TBL=%d TOFF=%d'
         ' HSTRT=%d HEND=%d' % (min_speed, max_speed, tbl_min, toff_min, hstrt_min, hend_min))}
    {% else %}
        {action_respond_info('Final travel distance = %.2f mm, position min = %.2f, traveling: %.2f --> %.2f' %
         (travel_distance, minAX, minAX, travel_distance + minAX))}
        {action_respond_info('Start of register enumeration mode, speed: %d --> %d mm/s'
         ' TBL: %d --> %d TOFF: %d --> %d HSTRT: %d --> %d HEND:'
          ' %d --> %d' % (min_speed, max_speed, tbl_min, tbl_max,
             toff_min, toff_max, hstrt_min, hstrt_max, hend_min, hend_max))}
    {% endif %}

    {% if not 'xy' in printer.toolhead.homed_axes %}                                    ; Check for axis homing
        G28 X Y
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={acceleration}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={acceleration}
    G0 {axis}{minAX} {b_axis}{midBAX} F{trv_speed}                                      ; Move to the initial position
    RUN_SHELL_COMMAND CMD=tmc_chop_tune PARAMS='cleaner'                                    ; Clean csv files
    ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still
    G4 P5000
    ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still

    {% for tbl in range(tbl_min, tbl_max + 1) %}                                     ; Set tbl values
        _chop_apply_regs a_stepper={a_stepper} b_stepper={b_stepper} field=tbl value={tbl}
        {% for toff in range(toff_min, toff_max + 1) %}                              ; Set toff values
             _chop_apply_regs a_stepper={a_stepper} b_stepper={b_stepper} field=toff value={toff}
            {% for hstrt_value in range(hstrt_min, hstrt_max + 1) %}
                {% for hend_value in range(hend_min, hend_max + 1) %}
                    {% if hend_value + hstrt_value <= hstrt_hend_max %}              ; Set hend, and hstrt values
                        _chop_apply_regs a_stepper={a_stepper} b_stepper={b_stepper} field=hend value={hend_value}
                        _chop_apply_regs a_stepper={a_stepper} b_stepper={b_stepper} field=hstrt value={hstrt_value}
                            DUMP_TMC STEPPER={a_stepper} REGISTER=chopconf          ; Dump TMC settings
                            {% for speed in range(min_speed, max_speed|int + 1) %}
                                {% if check == 'true' %}
                                    {% set travel_distance  = (travel_distance / max_speed) * speed %}
                                    G4 P{delay}
                                    M118 Speed {speed} mm/s on {travel_distance|round(2)|float} mm
                                {% endif %}
                                ACCELEROMETER_MEASURE CHIP={accel_chip}         ; Start accelerometer data collection
                                G0 {axis}{minAX + travel_distance} F{speed*60}  ; Movement
                                ACCELEROMETER_MEASURE CHIP={accel_chip}         ; Stop accelerometer data collection
                                G0 {axis}{minAX} F{trv_speed}                   ; Move to the initial position
                                M400
                            {% endfor %}
                    {% endif %}
                {% endfor %}
            {% endfor %}
        {% endfor %}
    {% endfor %}

    G4 P500
    G0 {axis}{((printer.configfile.settings['stepper_' + axis].position_max|float - inset) -
     (printer.configfile.settings['stepper_' + axis].position_min|float + inset)) / 2} F{trv_speed}

    RUN_SHELL_COMMAND CMD=tmc_chop_tune PARAMS='{'tbl_min=%d tbl_max=%d toff_min=%d toff_max=%d hstrt_hend_max=%d hstrt_min=%d hstrt_max=%d'
    ' hend_min=%d hend_max=%d min_speed=%d max_speed=%d accel_chip=%s driver=%s'%(
       tbl_min, tbl_max, toff_min, toff_max, hstrt_hend_max, hstrt_min, hstrt_max, hend_min, hend_max, min_speed, max_speed, accel_chip, driver)}' ; export data to processing
